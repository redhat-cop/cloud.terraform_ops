---
- module_defaults:
    group/gcp:
      project: "{{ gcp_project }}"
      auth_kind: "{{ gcp_cred_kind }}"
      service_account_file: "{{ gcp_cred_file }}"
  name: Test Role 'gcs_backend'
  block:
    # Create GCS backend
    - name: Create GCS backend for Terraform
      ansible.builtin.include_role:
        name: cloud.terraform_ops.gcs_backend
      vars:
        gcs_backend_operation: create
        gcs_backend_bucket_name: "{{ test_gcs_backend_bucket_name }}"
        gcs_backend_gcp_project: "{{ gcp_project }}"
        gcs_backend_auth_kind: "{{ gcp_cred_kind }}"
        gcs_backend_service_account_file: "{{ gcp_cred_file }}"

    # google.cloud does not support getting bucket info currently
    # quick solution for tests is to create bucket again and verify that task was not changed
    - name: Create a storage bucket with same configuration again
      google.cloud.gcp_storage_bucket:
        name: "{{ test_gcs_backend_bucket_name }}"
        project: "{{ gcp_project }}"
        auth_kind: "{{ gcp_cred_kind }}"
        service_account_file: "{{ gcp_cred_file }}"
        state: present
      register: bucket_info

    - name: Assert that storage bucket already exists
      ansible.builtin.assert:
        that:
          - bucket_info is not changed
          - bucket_info is not failed

    # Apply Terraform configuration using GCS backend
    - name: Create temporary directory to run Terraform configuration
      ansible.builtin.tempfile:
        state: directory
        suffix: .terraform
      register: tmpdir

    - name: Generate Terraform configuration
      ansible.builtin.template:
        src: 'main.tf.j2'
        dest: "{{ tmpdir.path }}/main.tf"

    - name: Apply Terraform configuration
      cloud.terraform.terraform:
        state: present
        project_path: "{{ tmpdir.path }}"
        force_init: true

    - name: Download the state file from storage bucket
      google.cloud.gcp_storage_object:
        action: download
        bucket: "{{ test_gcs_backend_bucket_name }}"
        src: "{{ test_gcs_backend_object_prefix }}/default.tfstate"
        dest: "{{ tmpdir.path }}/content.tfstate"
        project: "{{ gcp_project }}"
        auth_kind: "{{ gcp_cred_kind }}"
        service_account_file: "{{ gcp_cred_file }}"
      register: download_state_file

    - name: Check if downloaded file exists at destination
      stat:
        path: "{{ tmpdir.path }}/content.tfstate"
      register: file_status

    - name: Ensure downloaded state file is not empty
      ansible.builtin.assert:
        that:
          - download_state_file is changed
          - download_state_file is not failed
          - file_status.stat.exists is true
          - file_status.stat.size > 0
          - file_status.stat.mimetype == "application/json"

    # Delete the Backend resources
    # currently, fails as google.cloud.gcp_storage_bucket module does not support force delete non-empty bucket
    # object deletion does not help as buckets with versioning enabled retain the deleted objects
    - name: Delete GCS backend resources
      ansible.builtin.include_role:
        name: cloud.terraform_ops.gcs_backend
      vars:
        gcs_backend_operation: delete
        gcs_backend_bucket_name: "{{ test_gcs_backend_bucket_name }}"
        gcs_backend_gcp_project: "{{ gcp_project }}"
        gcs_backend_auth_kind: "{{ gcp_cred_kind }}"
        gcs_backend_service_account_file: "{{ gcp_cred_file }}"
      register: delete_bucket_result

  # rescue failed include_role above to avoid test failure (failed=0, rescued=1)
  rescue:
    - name: Print above task failed as expected
      debug:
        msg:
          - 'Above task failure is expected as non-empty buckets deletion is not supported by google.cloud.gcp_storage_bucket'

  always:
    # currently, google.cloud does not support deleting non-empty buckets
    # possible options are SDK or gsutil
    - name: execute python script to delete non-empty bucket
      ansible.builtin.script: force_delete_bucket.py
      args:
        chdir: "{{ role_path }}/files"
      environment:
        BUCKET_NAME: "{{ test_gcs_backend_bucket_name }}"
        CLOUDSDK_CORE_PROJECT: "{{ gcp_project }}"
        GOOGLE_APPLICATION_CREDENTIALS: "{{ gcp_cred_file }}"
      run_once: true
      register: result

    - name: Delete temporary directory
      ansible.builtin.file:
        state: absent
        path: "{{ tmpdir.path }}"
      when: tmpdir is defined
